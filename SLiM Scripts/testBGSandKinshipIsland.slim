//  (f$)genomicHeterozygosity(o<Genome>$ genome1, o<Genome>$ genome2)
//  (f$)subpopHeterozygosity(o<Subpopulation>$ subpop, [i$ sampleSize=100])
//
//  Calculate average nucleotide heterozygosity for a pair of genomes,
//  or for a subpopulation (using a sample of individuals).

//  Created by Ben Haller on 10/24/2017.
//  A product of the Messer Lab, http://messerlab.org/slim/

/*

Ben Haller and Philipp Messer, the authors of this code, hereby place the code in this file into the public domain without restriction.  If you use this code, please credit SLiM-Extras and provide a link to the SLiM-Extras repository at https://github.com/MesserLab/SLiM-Extras.  Thank you.

*/


/*

  Given two haploid genomes, the number of segregating sites between the two, divided by the length of the chromosome, is pi, the average nucleotide heterozygosity, which is the standard measure for the genetic diversity in a population.  The expected value of pi is 4*Ne*mu for a pure neutral model.

  Note that this function assumes that L is a defined constant, the length of the chromosome; if you don't want to define that constant, you will need to pass in the chromosome length as a parameter instead.

MODIFIED

*/
function (f$)genomicHeterozygosity(o<Genome>$ genome1, o<Genome>$ genome2, o<MutationType>$ m)
{
	muts1 = genome1.mutations[genome1.mutations.mutationType == m];
	muts2 = genome2.mutations[genome2.mutations.mutationType == m];
	unshared = setSymmetricDifference(muts1, muts2);
	pi = size(unshared) / 100000;
	return pi;
}

/*

  Estimate the average nucleotide heterozygosity in a subpopulation by sampling individuals at random and averaging the heterozygosity of all of the individuals sampled.  Note that this function normally uses a sample of individuals, of a size supplied in the optional parameter sampleSize; but if sampleSize is equal to the number of individuals in subpop, it will instead compute the heterozygosity exactly, as the mean of the heterozygosities of all individuals, rather than taking a sample.  For large subpopulations, that will of course be much slower than using a sample, however.

*/
function (f$)subpopHeterozygosity(o<Subpopulation>$ subpop, o<MutationType>$m, [i$ sampleSize=100])
{
	if (sampleSize == subpop.individualCount)
		sampledIndividuals = subpop.individuals;
	else
		sampledIndividuals = sample(subpop.individuals, sampleSize, replace=T);
	
	pi_total = 0;
	for (individual in sampledIndividuals)
	{
		genomes = individual.genomes;
		individual_pi = genomicHeterozygosity(genomes[0], genomes[1], m);
		pi_total = pi_total + individual_pi;
	}
	return pi_total / sampleSize;
}

function (f$)subpopAllHeterozygosity(o<MutationType>$m, [i$ sampleSize=100])
{
	if (sampleSize >= sum(sim.subpopulations.individualCount))
		sampledIndividuals = sim.subpopulations.individuals;
	else
		sampledIndividuals = sample(sim.subpopulations.individuals, sampleSize, replace=T);
	
	pi_total = 0;
	for (individual in sampledIndividuals)
	{
		genomes = individual.genomes;
		individual_pi = genomicHeterozygosity(genomes[0], genomes[1], m);
		pi_total = pi_total + individual_pi;
	}
	return pi_total / sampleSize;
}


// set up a simple neutral simulation
initialize() {
	initializeSLiMModelType("nonWF");
	
	//setSeed(2408719498743);
	
	//carrying capacity per island
	defineConstant("K", 6);
	//starting population size per population
	defineConstant("popSize", 10);
	//number of populations
	defineConstant("numPops", 100);

	
	//migration rate
	defineConstant("mRate", 30 / 100);	
		
	//fitness
	defineConstant("fitness", 0 / 1000);
	
	//just try
	defineConstant("iter", 0);
	defineConstant("replicate", 0);
	defineConstant("makeSeeds", 0);
	defineConstant("litterSize", 4);
	
	//other
	//defineConstant("replicate", 1);
	defineConstant("cost", 0.01);
	defineConstant("benefit", 0.03);
	defineConstant("outputPath", "test.csv");
	
	defineConstant("seedPath", paste(c("seeds/seed_island_",
														fitness,
														"_",
														iter,
														".txt"),
													sep = ""));
	
	// m1 mutation type: altruistic
	initializeMutationType("m1", 0.5, "f", 0.0);
	m1.convertToSubstitution = F;

	// m2 mutation type: neutral
	initializeMutationType("m2", 0.5, "f", 0.0);
	m2.convertToSubstitution = F;
	
	// m3 mutation type: negative
	initializeMutationType("m3", 0.5, "f", fitness);
	m3.convertToSubstitution = F;
	
	// g1 genomic element type
	initializeGenomicElementType("g1", c(m2, m3), c(1.0, 1.0));
	
	// uniform chromosome of length 100 kb with uniform recombination
	initializeGenomicElement(g1, 0, 99999);
	
	initializeRecombinationRate(1e-8);
	
	initializeMutationRate(1e-7);
}

reproduction() {
	for(p in sim.subpopulations){
		// randomize the order of p.individuals
		parents = sample(p.individuals, p.individualCount);

		//make sure there are enough individuals to have children
		if(p.individualCount < 2){
			next;
		}
		
		// draw monogamous pairs and generate litters
		for (i in seq(0, p.individualCount - 2, by=2)){
			parent1 = parents[i];
			parent2 = parents[i + 1];
									
			for (j in seqLen(litterSize)){
				child = p.addCrossed(parent1, parent2);
				child.tagF = 0;
			}
				
		} //end parent pair loop
	} //end subpopulation loop
	
	// disable this callback for this generation
	self.active = 0;
}
fitness(NULL){
	return (1.0 + individual.tagF);
}


1 {
	print(paste(c("\tfitness: ", fitness, "\tbenefit: ", benefit, "\treplicate: ", replicate)));

	if(!makeSeeds){
		sim.readFromPopulationFile(seedPath);
		sim.subpopulations.individuals.tagF = 0.0;
		sim.generation = 4999;
	}
	else{
		for(i in seqLen(numPops)){
			sim.addSubpop(i, popSize);
		}
		
		
		sim.subpopulations.individuals.tagF = 0;
	}
}

4999 early(){
	if(makeSeeds){
		sim.outputFull(seedPath);
		sim.simulationFinished();
	}
}

5000 early(){
	target = sample(sim.subpopulations.genomes, 10);
	target.addNewDrawnMutation(m1, 1000);
}

early() {
	//interact within subpopulations
	for (p in sim.subpopulations){
		//only young individuals interact (those born this generation)
		young = p.individuals[p.individuals.age == 0];

		//every young individual may interact with others
		for (y in young){

			//interact with 3 others OR the number of all available others
			//if there are less than 3 others
			numOthers = min(3, length(young) - 1);

			//sample numOthers + 1, in case one the sampled ind.s is y
			//then the extra one sampled is used instead
			others = sample(young, numOthers + 1);
			skippedSelf = F;

			//run through the interactions for this individual, y
			for (i in seqLen(numOthers)){
				//get the other participant of this interaction
				o = others[i];

				//check if o == y and skip if so
				if(o == y){
					skippedSelf = T;
					next;
				}

				//otherwise, interact (one-way)
				ym1 = y.countOfMutationsOfType(m1);
				om1 = o.countOfMutationsOfType(m1);

				//if y is altruistic
				if (ym1 > 0){
					y.tagF = y.tagF - cost;
					o.tagF = o.tagF + benefit;
					print(paste(c(y.index, "helps", o.index, "in population", p.id)));
				}

				//if o is altruistic
				/*if (om1 > 0){
					o.tagF = o.tagF + benefit;
					y.tagF = y.tagF - cost;
				}*/
			}
			//if self was skipped, use the last one in others
			if(skippedSelf){
				o = others[numOthers];

				//interact with o (one-way)
				ym1 = y.countOfMutationsOfType(m1);
				om1 = o.countOfMutationsOfType(m1);

				if (ym1 > 0){
					y.tagF = y.tagF - cost;
					o.tagF = o.tagF + benefit;
					print(paste(c(y.index, "helps", o.index, "in population", p.id)));
				}

				/*if (om1 > 0){
					o.tagF = o.tagF + benefit;
					y.tagF = y.tagF - cost;
				}*/
			}

		}
	} //end altruistic interactions

	//begin random migration
	
	//get the migrants
	nIndividuals = sum(sim.subpopulations.individualCount);
	if(nIndividuals > 0){
		nMigrants = rpois(1, nIndividuals * mRate);
		if(nMigrants > nIndividuals){
			nMigrants = nIndividuals;
		}
		migrants = sample(sim.subpopulations.individuals, nMigrants);
		
		//move them to different subpopulations
		for(migrant in migrants){
			do{
				dest = sample(sim.subpopulations, 1);
			}
			while(dest == migrant.subpopulation);
			
			dest.takeMigrants(migrant);
		}
	}


	//adjust fitness for age and carrying capacity
	for(p in sim.subpopulations){
		//age table
		old = p.individuals[p.individuals.age >= 1];
		old.fitnessScaling = 0;

		//first only consider individuals who aren't meant to die yet
		adjustedPopulationSize = p.individualCount - length(old);
		//then adjust survival for carrying capacity, K
		p.fitnessScaling = K / adjustedPopulationSize;
	}
}


late() {
	if(sim.generation >= 5000){
		sumM1 = sum(sim.subpopulations.individuals.countOfMutationsOfType(m1));
		percentM1 = sumM1 / (sum(sim.subpopulations.individualCount) * 2);
		
		//get status
		status = "NONE";
		
		if(percentM1 == 0){
			status = "lost";
		}
		else if(percentM1 == 1){
			status = "fixed";
		}
		else if(!(sim.generation % 10)){
			status = "ongoing";
		}
		
		if(status != "NONE"){
			//write to file
			writeFile(
				outputPath,
				paste(
					c(
						sim.generation,
						fitness,
						cost,
						benefit,
						litterSize,
						sum(sim.subpopulations.individualCount),
						length(unique(
							sim.subpopulations.genomes.mutations[
								sim.subpopulations.genomes.mutations.mutationType == m2]
							)),
						subpopAllHeterozygosity(m2),
						percentM1,
						status,
						replicate,
						seedPath
					),
					sep = ","),
				append = T);
			
			if(status != "ongoing"){
				sim.simulationFinished();
			}

		}
		
	}
}

25000 late() {
	sim.simulationFinished();
}